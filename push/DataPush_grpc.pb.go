// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: push/DataPush.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PushServiceClient is the client API for PushService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushServiceClient interface {
	// 推送数据到agent
	PushData(ctx context.Context, opts ...grpc.CallOption) (PushService_PushDataClient, error)
}

type pushServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPushServiceClient(cc grpc.ClientConnInterface) PushServiceClient {
	return &pushServiceClient{cc}
}

func (c *pushServiceClient) PushData(ctx context.Context, opts ...grpc.CallOption) (PushService_PushDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &PushService_ServiceDesc.Streams[0], "/lhotse.networking.v1alpha1.PushService/PushData", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushServicePushDataClient{stream}
	return x, nil
}

type PushService_PushDataClient interface {
	Send(*DataPushRequest) error
	Recv() (*DataPushResponse, error)
	grpc.ClientStream
}

type pushServicePushDataClient struct {
	grpc.ClientStream
}

func (x *pushServicePushDataClient) Send(m *DataPushRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pushServicePushDataClient) Recv() (*DataPushResponse, error) {
	m := new(DataPushResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PushServiceServer is the server API for PushService service.
// All implementations must embed UnimplementedPushServiceServer
// for forward compatibility
type PushServiceServer interface {
	// 推送数据到agent
	PushData(PushService_PushDataServer) error
	mustEmbedUnimplementedPushServiceServer()
}

// UnimplementedPushServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPushServiceServer struct {
}

func (UnimplementedPushServiceServer) PushData(PushService_PushDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PushData not implemented")
}
func (UnimplementedPushServiceServer) mustEmbedUnimplementedPushServiceServer() {}

// UnsafePushServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushServiceServer will
// result in compilation errors.
type UnsafePushServiceServer interface {
	mustEmbedUnimplementedPushServiceServer()
}

func RegisterPushServiceServer(s grpc.ServiceRegistrar, srv PushServiceServer) {
	s.RegisterService(&PushService_ServiceDesc, srv)
}

func _PushService_PushData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PushServiceServer).PushData(&pushServicePushDataServer{stream})
}

type PushService_PushDataServer interface {
	Send(*DataPushResponse) error
	Recv() (*DataPushRequest, error)
	grpc.ServerStream
}

type pushServicePushDataServer struct {
	grpc.ServerStream
}

func (x *pushServicePushDataServer) Send(m *DataPushResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pushServicePushDataServer) Recv() (*DataPushRequest, error) {
	m := new(DataPushRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PushService_ServiceDesc is the grpc.ServiceDesc for PushService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lhotse.networking.v1alpha1.PushService",
	HandlerType: (*PushServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushData",
			Handler:       _PushService_PushData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "push/DataPush.proto",
}
